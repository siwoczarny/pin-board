{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","currentDate","Date","toLocaleDateString","minDate","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","length","props","add","alert","maxDate","this","className","htmlFor","type","placeholder","onChange","id","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","change","delete","finish","TaskList","tasks","filter","done","sort","x","y","activeTasks","map","key","doneTasks","App","counter","deleteTask","index","findIndex","splice","changeTaskStatus","console","log","Array","from","forEach","getTime","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f157168.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../styles/AddTask.scss';\n\n\nclass AddTask extends Component {\n    \n    currentDate = new Date().toLocaleDateString();\n    minDate = new Date().toISOString().slice(0,10);\n    state = { \n        text: '',\n        checked: false,\n        date: this.minDate\n    }\n\n    handleText = (e) => {\n        this.setState({\n            text: e.target.value\n        })\n    }\n\n    handleCheckbox = (e) => {\n        this.setState({\n            checked: e.target.checked\n        })\n    }\n\n    handleDate = (e) => {\n        this.setState({\n            date: e.target.value\n        })\n    }\n\n    // contDate = new Date().toLocaleTimeString\n\n    handleClick = () => {\n\n        const {text, date, checked} = this.state;\n        \n        if(text.length >= 3) {\n            const add = this.props.add(text, date, checked);\n            \n            if (add) {\n                this.setState({\n                    text: '',\n                    checked: false,\n                    date: this.minDate\n                })\n            }\n        } else {\n            alert(\"Nazwa zadania za krótka, wpisz minimum 3 znaki\")\n        }\n    }\n\n    render() { \n        \n        let maxDate = this.minDate.slice(0,4);\n        maxDate = maxDate + \"-12-31\";\n        return ( \n            <div className=\"form\" >\n                <p>Dzisiejsza data: {this.currentDate}</p>\n                <label htmlFor=\"text\">Dodaj zadanie:</label><br/>\n                <input type=\"text\" placeholder=\"np. wynieść śmieci\" value={this.state.text} onChange={this.handleText} /><br />\n                <label htmlFor=\"important\" className=\"important\">Priorytet</label>\n                <input type=\"checkbox\" checked={this.state.checked} onChange={this.handleCheckbox} id=\"important\" className=\"important\" /><br />\n                <label htmlFor=\"date\">Termin wykonania:</label><br />\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate}/><br/>\n                <button onClick={this.handleClick}>Dodaj zadanie</button>\n            </div>\n         );\n    }\n}\n\nexport default AddTask;","import React from 'react';\n\nconst Task = (props) => {\n\n    const style = {\n        color: '#fa3232',\n    }\n\n    const { text, date, id, active, important, finishDate } = props.task;\n\n    if(active) {\n        return ( \n            <div className=\"task\">\n                <p>\n                    <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span><br />\n                    <button onClick={() => props.change(id)}> Zrobione!</button>\n                    <button onClick={() => props.delete(id)}> Skasuj</button>\n                </p>\n                \n\n            </div>\n        );\n    } else {\n\n        const finish = new Date(finishDate).toISOString().slice(0, 10);\n        return (\n         <div className=\"task\">\n            <p>\n                <strong>{text}</strong> - do <span>{date}</span><br />\n                /wykonano <span>{finish}/</span><br />\n                <button onClick={() => props.delete(id)}> Skasuj</button><br/>\n            </p>\n         </div>\n        )\n    }\n};\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\nimport \"../styles/TaskList.scss\";\n\nconst TaskList = (props) => {\n\n    const active = props.tasks.filter(task => task.active);\n    const done = props.tasks.filter(task => !task.active);\n\n    \n    if (active.length >= 2) {\n        active.sort((x, y) => {\n\n            x = x.important;\n            y = y.important;\n\n            if (x < y) {\n                return 1\n            }\n            if (x > y) {\n                return -1\n            }\n            return 0\n        })\n    }\n\n    if (done.length >=2) {\n        done.sort((x, y) => {\n            if (x.finishDate < y.finishDate) {\n                return 1\n            }\n            if (x.finishDate > y.finishDate) {\n                return -1\n            }\n            return 0\n        })\n\n        // lub\n        // done.sort((x,y) => b.finishdate - a.finishdate)\n    }\n\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />);\n\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />);\n\n    return ( \n        <div className=\"list\">\n            <div className=\"active\" >\n                <h3>Zadania do zrobienia [{active.length}]</h3>\n                {activeTasks.length > 0 ? activeTasks : <p>Brak zadań do zrobienia</p>}\n            </div>\n            <div className=\"done\" >\n                <h3>Zadania zrobione [{done.length}]</h3>\n                {doneTasks}\n            </div>\n        </div>\n     );\n}\n \nexport default TaskList;","import React, {Component} from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\nimport '../styles/App.scss';\n\nclass App extends Component {\n\n  counter = 6\n  state = { \n    tasks: []\n  }\n\n  deleteTask = (id) => {\n    const tasks = [...this.state.tasks]; //dokładna kopia tablicy, która jest w state\n    const index = tasks.findIndex(task => task.id === id); //znalezienie elementu, który pasuje do klikniętej pozycji\n    tasks.splice(index, 1); //usuwanie znalezionego elementu\n\n    this.setState({\n      tasks\n    })\n\n    //DRUGA MOŻLIWOŚĆ Z METODĄ FILTRUJĄCĄ\n    // let tasks = [...this.state.tasks];\n    // tasks = tasks.filter(task => task.id !== id);\n\n    // this.setState({\n    //   tasks\n    // })\n  }\n\n  changeTaskStatus = (id) => {\n    console.log(\"change w stanie elementu o id \" + id);\n\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if(task.id === id) {\n        task.active = false ;\n        task.finishDate = new Date().getTime();\n      }\n    })\n\n    this.setState({\n      tasks\n    })\n    console.log(tasks)\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text, //1 input\n      date, //2 input\n      important, //3 input\n      active: true,\n      finishDate: true\n    }\n    this.counter++\n    console.log(task, this.counter)\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n      \n    }))\n    return true\n  }\n\n  render() { \n    return ( \n      <div className=\"App\">\n        <header>\n          <h1>Lista \"do zrobienia\"</h1>\n          <h2>Przypomni o wszystkim</h2>\n        </header>\n        <hr />\n        <AddTask add={this.addTask} />\n        <hr />\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}